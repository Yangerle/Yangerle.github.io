<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Yangerle.github.io/"/>
  <updated>2019-09-26T09:09:50.399Z</updated>
  <id>http://Yangerle.github.io/</id>
  
  <author>
    <name>Yangerle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客搭建之在文章中插入图片</title>
    <link href="http://Yangerle.github.io/2018/11/15/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E5%9C%A8%E6%96%87%E7%AB%A0%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>http://Yangerle.github.io/2018/11/15/Hexo博客搭建之在文章中插入图片/</id>
    <published>2018-11-15T06:25:15.000Z</published>
    <updated>2019-09-26T09:09:50.399Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。</p><h4 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h4><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span>/images/image.jpg</span><br><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>将_config.yml文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_posts/post_name/image.jpg</span><br><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_posts/post_name/image.jpg</span><br><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在<a href="https://cloudinary.com/" target="_blank" rel="noopener">Cloudinary</a>中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</p><p>摘自<a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/#search" target="_blank" rel="noopener">Hexo博客搭建之在文章中插入图片</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。&lt;/p&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
      <category term="following" scheme="http://Yangerle.github.io/categories/following/"/>
    
    
      <category term="hexo" scheme="http://Yangerle.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Win10系统如何运行IE8</title>
    <link href="http://Yangerle.github.io/2018/11/15/Win10%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8CIE8/"/>
    <id>http://Yangerle.github.io/2018/11/15/Win10系统如何运行IE8/</id>
    <published>2018-11-15T04:59:54.000Z</published>
    <updated>2019-09-26T09:09:50.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>有些网页开发时是按照兼容IE8开发的，在IE9及以上的浏览器中由于兼容性不好显示不正常。Win10系统自带Edge浏览器和IE11浏览器也会显示不正常。本经验就来告诉大家怎样在Win10环境下完好显示基于IE8的网页…</p><h3 id="工具-原料"><a href="#工具-原料" class="headerlink" title="工具/原料"></a>工具/原料</h3><ul><li>Win10系统</li><li>Edge浏览器或IE11浏览器</li></ul><h3 id="方法-步骤"><a href="#方法-步骤" class="headerlink" title="方法/步骤"></a>方法/步骤</h3><ol><li><p>打开Edge浏览器，随便进入一个网页，如图选择进入Win10自带的IE11浏览器</p><p> <img src="/images/Win10系统如何运行IE8_1.jpg" alt=""></p></li><li><p>在IE11浏览器中，如图，进入“兼容性视图设置”</p><p> <img src="/images/Win10系统如何运行IE8_2.jpg" alt=""></p></li><li><p>如图，添加你要兼容的网址，并打上勾</p><p> <img src="/images/Win10系统如何运行IE8_3.jpg" alt=""></p></li><li><p>按F12，如图设置兼容IE8的模式</p><p> <img src="/images/Win10系统如何运行IE8_4.jpg" alt=""></p></li></ol><p>摘自<a href="https://jingyan.baidu.com/article/6b97984db7c9911ca2b0bf1c.html" target="_blank" rel="noopener">Win10系统如何运行IE8</a>(第四步图有补充，上红框)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;有些网页开发时是按照兼容IE8开发的，在IE9及以上的浏览器中由于兼容性不好显示不正常。Win10系统自带Edge浏览器和IE11浏览器也会
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下安装 nvm 管理 nodejs 版本</title>
    <link href="http://Yangerle.github.io/2018/11/15/Windows-%E4%B8%8B%E5%AE%89%E8%A3%85-nvm-%E7%AE%A1%E7%90%86-nodejs-%E7%89%88%E6%9C%AC/"/>
    <id>http://Yangerle.github.io/2018/11/15/Windows-下安装-nvm-管理-nodejs-版本/</id>
    <published>2018-11-15T02:24:31.000Z</published>
    <updated>2019-09-26T09:09:50.404Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载安装与使用"><a href="#下载安装与使用" class="headerlink" title="下载安装与使用"></a>下载安装与使用</h3><p><a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">Github： Download nvm-windows — nvm-setup.zip</a></p><p>程序安装过程中，在 Set Node.js Symlink 这一步目录设置，</p><p>是待会 nvm use 存放你的 nodejs 程序的目录 [C:\DevTools\nodejs]。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nvm v // 查看版本 =&gt; 1.1.1 </span><br><span class="line">nvm install latest // 下载最新的 node 版本 v7.2.0</span><br><span class="line"></span><br><span class="line">nvm install 4.4.4 // 安装不同版本</span><br><span class="line">nvm install 6.2.0 32 // 默认是64位，32位需指定</span><br><span class="line">nvm uninstall 6.2.0 <span class="comment">#卸载对应的版本</span></span><br></pre></td></tr></table></figure><p>下载完成后，会在 \nvm 文件夹下多个 v7.2.0 文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nvm use 7.2.0 // 引入使用</span><br><span class="line">nvm list // 查看已安装的 node 版本</span><br><span class="line"></span><br><span class="line">  * 7.2.0 (Currently using 64-bit executable)</span><br><span class="line">    6.2.0</span><br><span class="line">    4.4.4</span><br></pre></td></tr></table></figure><p>更多命令使用键入 nvm 查看。</p><p>这时就会在 C:\DevTools\nodejs 的目录出现个 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">nodejs</a> 的快捷方式。</p><h3 id="配置-npm-全局安装路径"><a href="#配置-npm-全局安装路径" class="headerlink" title="配置 npm 全局安装路径"></a>配置 npm 全局安装路径</h3><p>执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">"E:\nodejs\npm-global"</span></span><br></pre></td></tr></table></figure><p>C:\Users\你的用户名\ 会生成个 .npmrc 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix=E:\nodejs\npm-global</span><br></pre></td></tr></table></figure><p>去装些全局的东西 npm install vue -g.</p><p>全局的所有包都在这：E:\nodejs\npm-global\node_modules</p><p>设置——系统——关于——系统信息——高级程序设置——环境变量——xxx用户的变量</p><p>修改环境变量，将 C:\Users\你的用户名\AppData\Roaming\npm 修改为 PATH E:\nodejs\npm-global.</p><h3 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 <a href="https://npm.taobao.org/" target="_blank" rel="noopener">cnpm</a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">npm install -g cnpm --registry=http://r.cnpmjs.org</span><br></pre></td></tr></table></figure><h3 id="解决-nvm-无法切换源"><a href="#解决-nvm-无法切换源" class="headerlink" title="解决 nvm 无法切换源"></a>解决 nvm 无法切换源</h3><blockquote><p>由于最近重装了 node &amp; nvm, 使用时 nvm install 正常，但是切换源无法使用。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm use 8.0.0</span><br><span class="line">Now using node v8.0.0 (64-bit) // 这个提示正常来讲是切换成功的</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">v7.6.4 // 还是原来版本</span><br></pre></td></tr></table></figure><p><strong>卸载原来已安装的 node, 与全局安装的包</strong></p><h3 id="解决-nvm-下载慢的问题"><a href="#解决-nvm-下载慢的问题" class="headerlink" title="解决 nvm 下载慢的问题"></a>解决 nvm 下载慢的问题</h3><blockquote><p>在程序安装目录下找到 settings.txt，添加下面两行。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root: C:\Program Files\nvm</span><br><span class="line">path: C:\Program Files\nodejs</span><br><span class="line">+ node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">+ npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>摘自<a href="https://segmentfault.com/a/1190000007612011" target="_blank" rel="noopener">Windows 下安装 nvm 管理 nodejs 版本</a></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><ol><li><p>nvm默认安装路径：C:\Users\Yangerle\AppData\Roaming\nvm</p><p>设置npm全局安装路径：npm config set prefix “E:\nodejs\npm-global”</p><p>修改环境变量，将 C:\Users\你的用户名\AppData\Roaming\npm 修改为 PATH E:\nodejs\npm-global：使各npm包能找到相应命令去执行</p><p>nvm对于每个项目（即项目所在根目录）都要使用命令：nvm use ‘版本号’，去切换每个项目用到的node版本。</p><p>悟自<a href="https://segmentfault.com/a/1190000007612011" target="_blank" rel="noopener">Windows 下安装 nvm 管理 nodejs 版本</a></p></li><li><p>只能配合npm执行命令，使用yarn会出现找不到命令</p><p>yarn 和 npm 用的不是同一个配置，而且建议最好不要混用(不要配置到同一个目录)，因为 npm 和 yarn 的 node_modules 目录结构不太一样，虽然 node 都认识。在 yarn cache 文档中，提到了可以通过 yarn config set cache-folder <path></path> 来设置 cache 目录。但是还没找到哪里有提到设置 global 目录。</p><p>悟自<a href="https://segmentfault.com/a/1190000008489881" target="_blank" rel="noopener">使用 yarn global 代替 npm -g</a></p></li><li><p>yarn默认包命令位置：C:\Users\Yangerle\AppData\Local\Yarn\bin(可设置命令为：yarn config set prefix C:/Users/Yangerle/AppData/Local/Yarn)</p><p>yarn默认包下载位置：C:\Users\Yangerle\AppData\Local\Yarn\Data\global\node_modules</p><p>悟自<a href="https://yarnpkg.com/lang/zh-hans/docs/cli/global/" target="_blank" rel="noopener">yarn global</a></p></li><li><p>yarn可能会寻找npm包安装路径，进行缓存及命令置入，所以不要轻易修改npm全局安装路径，除非你不使用yarn.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载安装与使用&quot;&gt;&lt;a href=&quot;#下载安装与使用&quot; class=&quot;headerlink&quot; title=&quot;下载安装与使用&quot;&gt;&lt;/a&gt;下载安装与使用&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/coreybutler/nvm-window
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>项目中有文件夹无法add</title>
    <link href="http://Yangerle.github.io/2018/09/17/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%9C%89%E6%96%87%E4%BB%B6%E5%A4%B9%E6%97%A0%E6%B3%95add/"/>
    <id>http://Yangerle.github.io/2018/09/17/项目中有文件夹无法add/</id>
    <published>2018-09-17T08:17:53.000Z</published>
    <updated>2018-09-17T14:21:37.736Z</updated>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>在提交hexo博客项目时，./themes/indigo是一个子项目，在不知道<br>的情况下提交至远程仓库，结果indigo文件夹的内容并没有上传，在本<br>地删除.git文件夹，然后继续执行git add -A命令，结果提示分支是干<br>净的，没有要提交的东西。</li></ul><h4 id="探索过程"><a href="#探索过程" class="headerlink" title="探索过程"></a>探索过程</h4><ul><li>使用关键词 <code>项目中有文件夹无法add进去</code> ，按照文章执行如下命令<br><code>git add -f ./themes/indigo/*</code>,报错如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: Pathspec <span class="string">'./themes/indigo/_config.yml'</span> is <span class="keyword">in</span> submodule <span class="string">'themes/indigo'</span></span><br></pre></td></tr></table></figure><ul><li>使用报错信息中的 <code>fatal: Pathspec is in submodule</code> 作为关键词继续搜索发现另一篇文章里的内容：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">简述下出现的情况：</span><br><span class="line">1.之前从github上，<span class="built_in">clone</span>了一个clockpicker的插件，然后，直接将整个版本库，复制到了项目中</span><br><span class="line">2.发现版本库中，并未记录到该目录！查看 <span class="string">'.gitignore'</span> 等，也并未找到忽略该目录</span><br><span class="line">3.进入clockpicker目录下，发现有.git, .gitignore，因为原本就是完整的一个git仓库，猜想和这个有关，然后删除的只剩下 dist, src。然后 git status 查看，发现扔未记录</span><br><span class="line">4.强制 git add dist 目录，出现错误：</span><br><span class="line">fatal: Pathspec <span class="string">'dist/'</span> is <span class="keyword">in</span> submodule <span class="string">'public/components/clockpicker'</span></span><br><span class="line">5.google搜索：</span><br><span class="line">https://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">原因解释：</span><br><span class="line">This works <span class="keyword">if</span> you purposefully removed the .git directory because you wanted to add directory to your main git project. In my specific <span class="keyword">case</span>, I had git cloned an extension and ran git add . without thinking too much. Git decided to create a submodule, <span class="built_in">which</span> I didn<span class="string">'t like. So I removed directory/.git and ran into Git: fatal: Pathspec is in submodule. I couldn'</span>t find out how to remove the submodule stuff. Fixed with the two lines above.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">在我的主项目中，我<span class="built_in">clone</span>一个git扩展，并运行了git add，并没有想太多。在这种情况下，git会创建一个子模块(也就是报错中的submodule)，然后，就同我上面的第3步一样，将.git等等都删除了。然后运行git add 报错！</span><br><span class="line">-----------------</span><br><span class="line">不懂，反正大概意思了解就行，尽量不要在我们的项目中，再引入其他git仓库，我们自己都觉得不太对劲...</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">解决方案：</span><br><span class="line">git rm --cached clockpicker</span><br><span class="line">git add clockpicker才能够</span><br></pre></td></tr></table></figure><ul><li>分析文章发现，应该是在首次提交时没有删除子项目中的.git文件夹，结果<br>在上传时git自动把项目转化为子模块submodule，导致无法add。解决问题的关键<br>在于删除根项目子模块记录，执行以下命令成功提交：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached ./themes/indigo</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'indigo inject'</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><p>1.git各种add的区别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . <span class="comment">#将目录下所有新增和修改存至缓存区，但不包括删除</span></span><br><span class="line">git add -u <span class="comment">#将目录下所有修改和删除存至缓存区，但不包扣新增</span></span><br><span class="line">git add -A <span class="comment">#缓存所有改动</span></span><br></pre></td></tr></table></figure><p>2.markdown</p><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">markdown基本语法</a></p><p><a href="https://www.jianshu.com/p/a95d8d08bc05" target="_blank" rel="noopener">markdown使用手册</a></p><p>3.git命令</p><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></p><h2 id="更多精彩-gt-请进入我的博客"><a href="#更多精彩-gt-请进入我的博客" class="headerlink" title="更多精彩-&gt;请进入我的博客"></a><a href="https://yangerle.github.io/">更多精彩-&gt;请进入我的博客</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://blog.csdn.net/xiaotuni/article/details/77885140" target="_blank" rel="noopener">git 添加文件和目录的时候，老是不能包括在git里。</a></p><p> <a href="https://blog.csdn.net/beyond__devil/article/details/73550807" target="_blank" rel="noopener">git 出现 fatal: Pathspec ‘assets/‘ is in submodule ‘public/components/clockpicker’，解决方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;在提交hexo博客项目时，./themes/indigo是一个子项目，在不知道&lt;br&gt;的情况下提交至远程仓库，结
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="问解" scheme="http://Yangerle.github.io/tags/%E9%97%AE%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>创建与远程仓库协调一致的本地仓库</title>
    <link href="http://Yangerle.github.io/2018/03/22/%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8D%8F%E8%B0%83%E4%B8%80%E8%87%B4%E7%9A%84%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93/"/>
    <id>http://Yangerle.github.io/2018/03/22/创建与远程仓库协调一致的本地仓库/</id>
    <published>2018-03-22T09:03:23.000Z</published>
    <updated>2018-03-22T15:33:59.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入"><a href="#第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入" class="headerlink" title="第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入"></a>第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入</h2><ul><li>用git命令将置入的项目文件添加进代码管理，commit后，提交至云端，用到的命令有：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://git.coding.net/Yangerle/prjname.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init prj"</span></span><br><span class="line">git push -u orgin master</span><br></pre></td></tr></table></figure><h2 id="思路二：在本地创建git仓库，然后将项目文件置入，用git命令使其与创建的远程仓库相关联"><a href="#思路二：在本地创建git仓库，然后将项目文件置入，用git命令使其与创建的远程仓库相关联" class="headerlink" title="思路二：在本地创建git仓库，然后将项目文件置入，用git命令使其与创建的远程仓库相关联"></a>思路二：在本地创建git仓库，然后将项目文件置入，用git命令使其与创建的远程仓库相关联</h2><ul><li>项目文件置入流程，同思路一，使用到的命令如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"init prj"</span></span><br><span class="line">git remote add orgin https://git.coding.net/Yangerle/prjname.git</span><br><span class="line">git push -u orgin master</span><br></pre></td></tr></table></figure><h2 id="综上"><a href="#综上" class="headerlink" title="综上"></a>综上</h2><ul><li>更推荐，第一种方式</li></ul><h2 id="遇到问题的解决"><a href="#遇到问题的解决" class="headerlink" title="遇到问题的解决"></a>遇到问题的解决</h2><ul><li>在为hexo创建仓库时，内部主题文件，indigo不能加入代码管理，因为indigo也属于一个仓库，要将其内部隐藏的.git文件夹删除才能加入暂存区，否则会报如下错误：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modified:   themes/indigo (modified content, untracked content)</span><br></pre></td></tr></table></figure><ul><li>代码仓库忽略不重要的文件夹，使用.gitignore文件，文件内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.<span class="built_in">log</span></span><br><span class="line">node_modules/</span><br><span class="line">.deploy_git/</span><br><span class="line">.idea/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><h2 id="更多精彩-gt-请进入我的博客"><a href="#更多精彩-gt-请进入我的博客" class="headerlink" title="更多精彩-&gt;请进入我的博客"></a><a href="https://yangerle.github.io/">更多精彩-&gt;请进入我的博客</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/minjing_lin/article/details/50678708" target="_blank" rel="noopener">本地Git仓库和远程仓库的创建及关联 Coding.net</a><br><a href="https://blog.csdn.net/nunchakushuang/article/details/45193109" target="_blank" rel="noopener">如何将本地仓库和github仓库关联起来</a><br><a href="https://blog.csdn.net/qq_32846595/article/details/71149312" target="_blank" rel="noopener">如何将本地的代码上传到github</a><br><a href="https://www.cnblogs.com/wanqieddy/p/4210767.html" target="_blank" rel="noopener">modified: xxx(modified content, untracked content)</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000" target="_blank" rel="noopener">忽略特殊文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入&quot;&gt;&lt;a href=&quot;#第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>学习过程思索</title>
    <link href="http://Yangerle.github.io/2018/03/22/%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%E6%80%9D%E7%B4%A2/"/>
    <id>http://Yangerle.github.io/2018/03/22/学习过程思索/</id>
    <published>2018-03-22T06:27:16.000Z</published>
    <updated>2018-03-22T08:18:09.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="走向全栈的心路历程"><a href="#走向全栈的心路历程" class="headerlink" title="走向全栈的心路历程"></a>走向全栈的心路历程</h2><ul><li>前端入门，进入后端</li><li>后端深入，涉足前端</li><li>深入浅出，统一全栈</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"success"</span>)</span><br></pre></td></tr></table></figure><h2 id="更多精彩-gt-请进入我的博客"><a href="#更多精彩-gt-请进入我的博客" class="headerlink" title="更多精彩-&gt;请进入我的博客"></a><a href="https://yangerle.github.io/">更多精彩-&gt;请进入我的博客</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">走你</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;走向全栈的心路历程&quot;&gt;&lt;a href=&quot;#走向全栈的心路历程&quot; class=&quot;headerlink&quot; title=&quot;走向全栈的心路历程&quot;&gt;&lt;/a&gt;走向全栈的心路历程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前端入门，进入后端&lt;/li&gt;
&lt;li&gt;后端深入，涉足前端&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>to_r720_yang_vue_blog</title>
    <link href="http://Yangerle.github.io/2018/03/22/to-r720-yang-vue-blog/"/>
    <id>http://Yangerle.github.io/2018/03/22/to-r720-yang-vue-blog/</id>
    <published>2018-03-22T03:30:21.000Z</published>
    <updated>2018-09-17T14:21:37.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="yang-vue-blog迁移至新电脑，代码仓库放置在codeing"><a href="#yang-vue-blog迁移至新电脑，代码仓库放置在codeing" class="headerlink" title="yang-vue-blog迁移至新电脑，代码仓库放置在codeing"></a>yang-vue-blog迁移至新电脑，代码仓库放置在codeing</h2><h3 id="在clone时遇到问题"><a href="#在clone时遇到问题" class="headerlink" title="在clone时遇到问题"></a>在clone时遇到问题</h3><ul><li><p>执行git clone 命令时弹出输入账号密码的对话框</p><p>  解决：首次增加远程地址的时候带上密码，使用如下命令执行操作：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://Yangerle:password@git.coding.net/Yangerle/yang-vue-blog.git</span><br></pre></td></tr></table></figure><ul><li><p>clone命令执行过程中，速度慢，最终报错如下（第一框内容）：</p><p>  解决：项目太大，git默认下载缓存值太小，造成，解决如下（第二框内容）</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; curl 18 transfer closed with outstanding <span class="built_in">read</span> data remaining </span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config –global http.postBuffer 524288000（增大缓存值）</span><br><span class="line">git config –list（查看是否成功）</span><br></pre></td></tr></table></figure><h2 id="更多精彩-gt-请进入我的博客"><a href="#更多精彩-gt-请进入我的博客" class="headerlink" title="更多精彩-&gt;请进入我的博客"></a><a href="https://yangerle.github.io/">更多精彩-&gt;请进入我的博客</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/canfengyiyue/p/7266682.html" target="_blank" rel="noopener">从coding.net （git clone）项目代码到本地报403错误 解决方案</a></p><p><a href="http://blog.csdn.net/drift_axe/article/details/54924359" target="_blank" rel="noopener">error: RPC failed; curl 18 transfer closed with outstanding read data remaining</a></p><p><a href="https://stackoverflow.com/questions/38618885/error-rpc-failed-curl-transfer-closed-with-outstanding-read-data-remaining" target="_blank" rel="noopener">error: RPC failed; curl transfer closed with outstanding read data remaining</a></p><p><a href="http://blog.csdn.net/it_liuchengli/article/details/77040806" target="_blank" rel="noopener">git报错–RPC failed; curl 18 transfer closed with outstanding read data remaining</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;yang-vue-blog迁移至新电脑，代码仓库放置在codeing&quot;&gt;&lt;a href=&quot;#yang-vue-blog迁移至新电脑，代码仓库放置在codeing&quot; class=&quot;headerlink&quot; title=&quot;yang-vue-blog迁移至新电脑，代码仓库
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>to_r720</title>
    <link href="http://Yangerle.github.io/2018/03/21/to-r720/"/>
    <id>http://Yangerle.github.io/2018/03/21/to-r720/</id>
    <published>2018-03-21T06:40:38.000Z</published>
    <updated>2018-09-16T08:58:07.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-迁移至新电脑"><a href="#hexo-迁移至新电脑" class="headerlink" title="hexo 迁移至新电脑"></a>hexo 迁移至新电脑</h2><h3 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h3><ul><li>安装nodejs和git：</li><li>配置git，生成ssh key,添加至github，使当前电脑的git与你的github相连：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"email@example.com"</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><ul><li>拷贝原电脑项目文件中的_config.yml，themes，source，scaffolds，package.json，.gitignore到新电脑新建的文件夹中；</li><li>使用git bash 进入此新建文件夹：</li><li>执行如下命令（为新电脑全局安装hexo，安装项目依赖，安装hexo插件hexo-depolyer-git）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>接下来创建新博客，并测试是否成功：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"myNewTestBlog"</span></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>若本地成功部署，使用如下命令，部署至云端：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h3><ul><li>部署至云端时可能出现以下错误：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (<span class="built_in">exit</span> code 1)</span><br><span class="line">fatal: could not <span class="built_in">read</span> Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: No error</span><br><span class="line">FATAL Something<span class="string">'s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span></span><br><span class="line"><span class="string">Error: bash: /dev/tty: No such device or address</span></span><br><span class="line"><span class="string">error: failed to execute prompt script (exit code 1)</span></span><br><span class="line"><span class="string">fatal: could not read Username for '</span>https://github.com<span class="string">': No error</span></span><br></pre></td></tr></table></figure><ul><li>解决：将_config.yml中，原来加过的github源地址，改为下面形式（可能是更换新电脑，项目未克隆到本地，而出现的github项目验证的问题）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: ssh://git@github.com/yangerle/yangerle.github.io(注意username有大写换为小写,这样才能识别)</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="更多精彩-gt-请进入我的博客"><a href="#更多精彩-gt-请进入我的博客" class="headerlink" title="更多精彩-&gt;请进入我的博客"></a><a href="https://yangerle.github.io/">更多精彩-&gt;请进入我的博客</a></h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://jixiaokang.github.io/2017/01/18/hexo%E5%8D%9A%E5%AE%A2%E6%8D%A2%E7%94%B5%E8%84%91%E4%B9%8B%E5%90%8E%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">hexo博客换电脑之后配置</a></p><p><a href="https://segmentfault.com/q/1010000003734223" target="_blank" rel="noopener">hexo无法上传到github 试了各种办法依然无法成功，小白求助</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-迁移至新电脑&quot;&gt;&lt;a href=&quot;#hexo-迁移至新电脑&quot; class=&quot;headerlink&quot; title=&quot;hexo 迁移至新电脑&quot;&gt;&lt;/a&gt;hexo 迁移至新电脑&lt;/h2&gt;&lt;h3 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;head
      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>myworld</title>
    <link href="http://Yangerle.github.io/2017/09/06/myworld/"/>
    <id>http://Yangerle.github.io/2017/09/06/myworld/</id>
    <published>2017-09-06T00:38:09.000Z</published>
    <updated>2017-09-07T04:06:05.395Z</updated>
    
    <content type="html"><![CDATA[<p>会当凌绝顶，<br>一览众山小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;会当凌绝顶，&lt;br&gt;一览众山小。&lt;/p&gt;

      
    
    </summary>
    
      <category term="web前端" scheme="http://Yangerle.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="思维" scheme="http://Yangerle.github.io/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="智慧" scheme="http://Yangerle.github.io/tags/%E6%99%BA%E6%85%A7/"/>
    
      <category term="尾草" scheme="http://Yangerle.github.io/tags/%E5%B0%BE%E8%8D%89/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://Yangerle.github.io/2017/09/05/My-New-Post/"/>
    <id>http://Yangerle.github.io/2017/09/05/My-New-Post/</id>
    <published>2017-09-05T10:11:59.000Z</published>
    <updated>2019-09-26T09:09:50.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><h3 id="这是我的第一篇hexo博客"><a href="#这是我的第一篇hexo博客" class="headerlink" title="这是我的第一篇hexo博客"></a>这是我的第一篇hexo博客</h3><ul><li>hexo接口占用问题,在_congfig.yml中加入：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">   port: 4001</span><br><span class="line">   compress: <span class="literal">true</span></span><br><span class="line">   header: <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>hexo与GitHub连接：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/Yangerle/Yangerle.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>hexo初始部署在GitHub时,应该先安装插件：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p> Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure><h3 id="完成后部署："><a href="#完成后部署：" class="headerlink" title="完成后部署："></a>完成后部署：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h3 id="idea之bug"><a href="#idea之bug" class="headerlink" title="idea之bug"></a>idea之bug</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标题<span class="comment">#号后应加入空格，markdown并未规定</span></span><br></pre></td></tr></table></figure><p><em>杨旭乐 于 2017.9.5</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h2&gt;&lt;h3 id=&quot;这是我的第一篇hexo博客&quot;&gt;&lt;a href=&quot;#这是我的第一篇hexo博客&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Yangerle.github.io/2017/09/05/hello-world/"/>
    <id>http://Yangerle.github.io/2017/09/05/hello-world/</id>
    <published>2017-09-05T07:11:59.000Z</published>
    <updated>2018-09-17T14:21:37.731Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
