[{"title":"Hexo博客搭建之在文章中插入图片","date":"2018-11-15T06:25:15.000Z","path":"2018/11/15/Hexo博客搭建之在文章中插入图片/","text":"前言在写文章时，常常有配图说明的需求。Hexo有多种图片插入方式，可以将图片存放在本地引用或者将图片放在CDN上引用。 本地绝对路径当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。 12source/images/image.jpg![](/images/image.jpg) 图片既可以在首页内容中访问到，也可以在文章正文中访问到。 相对路径图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。 12_config.ymlpost_asset_folder: true 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 12_posts/post_name/image.jpg![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。 如果希望图片在文章和首页中同时显示，可以使用标签插件语法。 12_posts/post_name/image.jpg&#123;% asset_img image.jpg This is an image %&#125; CDN引用除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。 摘自Hexo博客搭建之在文章中插入图片","tags":[{"name":"hexo","slug":"hexo","permalink":"http://Yangerle.github.io/tags/hexo/"}]},{"title":"Win10系统如何运行IE8","date":"2018-11-15T04:59:54.000Z","path":"2018/11/15/Win10系统如何运行IE8/","text":"前言有些网页开发时是按照兼容IE8开发的，在IE9及以上的浏览器中由于兼容性不好显示不正常。Win10系统自带Edge浏览器和IE11浏览器也会显示不正常。本经验就来告诉大家怎样在Win10环境下完好显示基于IE8的网页… 工具/原料 Win10系统 Edge浏览器或IE11浏览器 方法/步骤 打开Edge浏览器，随便进入一个网页，如图选择进入Win10自带的IE11浏览器 在IE11浏览器中，如图，进入“兼容性视图设置” 如图，添加你要兼容的网址，并打上勾 按F12，如图设置兼容IE8的模式 摘自Win10系统如何运行IE8(第四步图有补充，上红框)","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"Windows 下安装 nvm 管理 nodejs 版本","date":"2018-11-15T02:24:31.000Z","path":"2018/11/15/Windows-下安装-nvm-管理-nodejs-版本/","text":"下载安装与使用Github： Download nvm-windows — nvm-setup.zip 程序安装过程中，在 Set Node.js Symlink 这一步目录设置， 是待会 nvm use 存放你的 nodejs 程序的目录 [C:\\DevTools\\nodejs]。 123456nvm v // 查看版本 =&gt; 1.1.1 nvm install latest // 下载最新的 node 版本 v7.2.0nvm install 4.4.4 // 安装不同版本nvm install 6.2.0 32 // 默认是64位，32位需指定nvm uninstall 6.2.0 #卸载对应的版本 下载完成后，会在 \\nvm 文件夹下多个 v7.2.0 文件夹。 123456nvm use 7.2.0 // 引入使用nvm list // 查看已安装的 node 版本 * 7.2.0 (Currently using 64-bit executable) 6.2.0 4.4.4 更多命令使用键入 nvm 查看。 这时就会在 C:\\DevTools\\nodejs 的目录出现个 nodejs 的快捷方式。 配置 npm 全局安装路径执行下面的命令： 1npm config set prefix \"E:\\nodejs\\npm-global\" C:\\Users\\你的用户名\\ 会生成个 .npmrc 文件，内容如下： 1prefix=E:\\nodejs\\npm-global 去装些全局的东西 npm install vue -g. 全局的所有包都在这：E:\\nodejs\\npm-global\\node_modules 设置——系统——关于——系统信息——高级程序设置——环境变量——xxx用户的变量 修改环境变量，将 C:\\Users\\你的用户名\\AppData\\Roaming\\npm 修改为 PATH E:\\nodejs\\npm-global. 安装 cnpm12npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm install -g cnpm --registry=http://r.cnpmjs.org 解决 nvm 无法切换源 由于最近重装了 node &amp; nvm, 使用时 nvm install 正常，但是切换源无法使用。 12345nvm use 8.0.0Now using node v8.0.0 (64-bit) // 这个提示正常来讲是切换成功的node -vv7.6.4 // 还是原来版本 卸载原来已安装的 node, 与全局安装的包 解决 nvm 下载慢的问题 在程序安装目录下找到 settings.txt，添加下面两行。 1234root: C:\\Program Files\\nvmpath: C:\\Program Files\\nodejs+ node_mirror: https://npm.taobao.org/mirrors/node/+ npm_mirror: https://npm.taobao.org/mirrors/npm/ 摘自Windows 下安装 nvm 管理 nodejs 版本 补充： nvm默认安装路径：C:\\Users\\Yangerle\\AppData\\Roaming\\nvm 设置npm全局安装路径：npm config set prefix “E:\\nodejs\\npm-global” 修改环境变量，将 C:\\Users\\你的用户名\\AppData\\Roaming\\npm 修改为 PATH E:\\nodejs\\npm-global：使各npm包能找到相应命令去执行 nvm对于每个项目（即项目所在根目录）都要使用命令：nvm use ‘版本号’，去切换每个项目用到的node版本。 悟自Windows 下安装 nvm 管理 nodejs 版本 只能配合npm执行命令，使用yarn会出现找不到命令 yarn 和 npm 用的不是同一个配置，而且建议最好不要混用(不要配置到同一个目录)，因为 npm 和 yarn 的 node_modules 目录结构不太一样，虽然 node 都认识。在 yarn cache 文档中，提到了可以通过 yarn config set cache-folder 来设置 cache 目录。但是还没找到哪里有提到设置 global 目录。 悟自使用 yarn global 代替 npm -g yarn默认包命令位置：C:\\Users\\Yangerle\\AppData\\Local\\Yarn\\bin(可设置命令为：yarn config set prefix C:/Users/Yangerle/AppData/Local/Yarn) yarn默认包下载位置：C:\\Users\\Yangerle\\AppData\\Local\\Yarn\\Data\\global\\node_modules 悟自yarn global yarn可能会寻找npm包安装路径，进行缓存及命令置入，所以不要轻易修改npm全局安装路径，除非你不使用yarn.","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"项目中有文件夹无法add","date":"2018-09-17T08:17:53.000Z","path":"2018/09/17/项目中有文件夹无法add/","text":"问题描述 在提交hexo博客项目时，./themes/indigo是一个子项目，在不知道的情况下提交至远程仓库，结果indigo文件夹的内容并没有上传，在本地删除.git文件夹，然后继续执行git add -A命令，结果提示分支是干净的，没有要提交的东西。 探索过程 使用关键词 项目中有文件夹无法add进去 ，按照文章执行如下命令git add -f ./themes/indigo/*,报错如下： 1fatal: Pathspec './themes/indigo/_config.yml' is in submodule 'themes/indigo' 使用报错信息中的 fatal: Pathspec is in submodule 作为关键词继续搜索发现另一篇文章里的内容： 12345678910111213141516171819202122简述下出现的情况： 1.之前从github上，clone了一个clockpicker的插件，然后，直接将整个版本库，复制到了项目中 2.发现版本库中，并未记录到该目录！查看 '.gitignore' 等，也并未找到忽略该目录 3.进入clockpicker目录下，发现有.git, .gitignore，因为原本就是完整的一个git仓库，猜想和这个有关，然后删除的只剩下 dist, src。然后 git status 查看，发现扔未记录 4.强制 git add dist 目录，出现错误： fatal: Pathspec 'dist/' is in submodule 'public/components/clockpicker' 5.google搜索： https://stackoverflow.com/questions/24472596/git-fatal-pathspec-is-in-submodule 原因解释： This works if you purposefully removed the .git directory because you wanted to add directory to your main git project. In my specific case, I had git cloned an extension and ran git add . without thinking too much. Git decided to create a submodule, which I didn't like. So I removed directory/.git and ran into Git: fatal: Pathspec is in submodule. I couldn't find out how to remove the submodule stuff. Fixed with the two lines above. 在我的主项目中，我clone一个git扩展，并运行了git add，并没有想太多。在这种情况下，git会创建一个子模块(也就是报错中的submodule)，然后，就同我上面的第3步一样，将.git等等都删除了。然后运行git add 报错！ ----------------- 不懂，反正大概意思了解就行，尽量不要在我们的项目中，再引入其他git仓库，我们自己都觉得不太对劲... 解决方案： git rm --cached clockpicker git add clockpicker才能够 分析文章发现，应该是在首次提交时没有删除子项目中的.git文件夹，结果在上传时git自动把项目转化为子模块submodule，导致无法add。解决问题的关键在于删除根项目子模块记录，执行以下命令成功提交： 1234git rm --cached ./themes/indigogit add -Agit commit -m 'indigo inject'git push 附：1.git各种add的区别 123git add . #将目录下所有新增和修改存至缓存区，但不包括删除git add -u #将目录下所有修改和删除存至缓存区，但不包扣新增git add -A #缓存所有改动 2.markdown markdown基本语法 markdown使用手册 3.git命令 常用 Git 命令清单 更多精彩-&gt;请进入我的博客参考 git 添加文件和目录的时候，老是不能包括在git里。 git 出现 fatal: Pathspec ‘assets/‘ is in submodule ‘public/components/clockpicker’，解决方法","tags":[{"name":"问解","slug":"问解","permalink":"http://Yangerle.github.io/tags/问解/"}]},{"title":"创建与远程仓库协调一致的本地仓库","date":"2018-03-22T09:03:23.000Z","path":"2018/03/22/创建与远程仓库协调一致的本地仓库/","text":"第一种思路，在github或者coding上创建仓库，clone远程仓库，将本地代码文件置入 用git命令将置入的项目文件添加进代码管理，commit后，提交至云端，用到的命令有： 1234git clone https://git.coding.net/Yangerle/prjname.gitgit add .git commit -m \"init prj\"git push -u orgin master 思路二：在本地创建git仓库，然后将项目文件置入，用git命令使其与创建的远程仓库相关联 项目文件置入流程，同思路一，使用到的命令如下： 1234git add .git commit -m \"init prj\"git remote add orgin https://git.coding.net/Yangerle/prjname.gitgit push -u orgin master 综上 更推荐，第一种方式 遇到问题的解决 在为hexo创建仓库时，内部主题文件，indigo不能加入代码管理，因为indigo也属于一个仓库，要将其内部隐藏的.git文件夹删除才能加入暂存区，否则会报如下错误： 1modified: themes/indigo (modified content, untracked content) 代码仓库忽略不重要的文件夹，使用.gitignore文件，文件内容如下 123456789.DS_StoreThumbs.dbdb.json*.lognode_modules/.deploy_git/.idea/public/.deploy*/ 更多精彩-&gt;请进入我的博客参考本地Git仓库和远程仓库的创建及关联 Coding.net如何将本地仓库和github仓库关联起来如何将本地的代码上传到githubmodified: xxx(modified content, untracked content)忽略特殊文件","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"学习过程思索","date":"2018-03-22T06:27:16.000Z","path":"2018/03/22/学习过程思索/","text":"走向全栈的心路历程 前端入门，进入后端 后端深入，涉足前端 深入浅出，统一全栈 1alert(\"success\") 更多精彩-&gt;请进入我的博客参考走你","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"to_r720_yang_vue_blog","date":"2018-03-22T03:30:21.000Z","path":"2018/03/22/to-r720-yang-vue-blog/","text":"yang-vue-blog迁移至新电脑，代码仓库放置在codeing在clone时遇到问题 执行git clone 命令时弹出输入账号密码的对话框 解决：首次增加远程地址的时候带上密码，使用如下命令执行操作： 1git clone https://Yangerle:password@git.coding.net/Yangerle/yang-vue-blog.git clone命令执行过程中，速度慢，最终报错如下（第一框内容）： 解决：项目太大，git默认下载缓存值太小，造成，解决如下（第二框内容） 1234error: RPC failed; curl 18 transfer closed with outstanding read data remaining fatal: The remote end hung up unexpectedlyfatal: early EOFfatal: index-pack failed 12git config –global http.postBuffer 524288000（增大缓存值）git config –list（查看是否成功） 更多精彩-&gt;请进入我的博客参考从coding.net （git clone）项目代码到本地报403错误 解决方案 error: RPC failed; curl 18 transfer closed with outstanding read data remaining error: RPC failed; curl transfer closed with outstanding read data remaining git报错–RPC failed; curl 18 transfer closed with outstanding read data remaining","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"to_r720","date":"2018-03-21T06:40:38.000Z","path":"2018/03/21/to-r720/","text":"hexo 迁移至新电脑迁移 安装nodejs和git： 配置git，生成ssh key,添加至github，使当前电脑的git与你的github相连： 123git config --global user.name \"username\"git config --global user.email \"email@example.com\"ssh-keygen -t rsa -C \"email@example.com\" 拷贝原电脑项目文件中的_config.yml，themes，source，scaffolds，package.json，.gitignore到新电脑新建的文件夹中； 使用git bash 进入此新建文件夹： 执行如下命令（为新电脑全局安装hexo，安装项目依赖，安装hexo插件hexo-depolyer-git）： 123npm install hexo-cli -gnpm installnpm install hexo-deployer-git --save 接下来创建新博客，并测试是否成功： 123hexo new \"myNewTestBlog\"hexo ghexo s 若本地成功部署，使用如下命令，部署至云端： 1hexo d 报错解决 部署至云端时可能出现以下错误： 1234567bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No errorFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: bash: /dev/tty: No such device or addresserror: failed to execute prompt script (exit code 1)fatal: could not read Username for 'https://github.com': No error 解决：将_config.yml中，原来加过的github源地址，改为下面形式（可能是更换新电脑，项目未克隆到本地，而出现的github项目验证的问题） 1234deploy: type: git repository: ssh://git@github.com/yangerle/yangerle.github.io(注意username有大写换为小写,这样才能识别) branch: master 更多精彩-&gt;请进入我的博客参考hexo博客换电脑之后配置 hexo无法上传到github 试了各种办法依然无法成功，小白求助","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"}]},{"title":"myworld","date":"2017-09-06T00:38:09.000Z","path":"2017/09/06/myworld/","text":"会当凌绝顶，一览众山小。","tags":[{"name":"思维","slug":"思维","permalink":"http://Yangerle.github.io/tags/思维/"},{"name":"智慧","slug":"智慧","permalink":"http://Yangerle.github.io/tags/智慧/"},{"name":"尾草","slug":"尾草","permalink":"http://Yangerle.github.io/tags/尾草/"}]},{"title":"My New Post","date":"2017-09-05T10:11:59.000Z","path":"2017/09/05/My-New-Post/","text":"你好这是我的第一篇hexo博客 hexo接口占用问题,在_congfig.yml中加入： 1234server: port: 4001 compress: true header: true hexo与GitHub连接： 1234deploy: type: git repository: https://github.com/Yangerle/Yangerle.github.io.git branch: master hexo初始部署在GitHub时,应该先安装插件： 123npm install hexo-deployer-git --savehexo ghexo d 监视文件变动 Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。 1hexo generate --watch 完成后部署：12hexo generate --deployhexo deploy --generate 简写12hexo g -dhexo d -g idea之bug1标题#号后应加入空格，markdown并未规定 杨旭乐 于 2017.9.5","tags":[]},{"title":"Hello World","date":"2017-09-05T07:11:59.000Z","path":"2017/09/05/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]